{"version":3,"file":"conveyer.min.js","sources":["../src/cfcs/reactive/const.ts","../src/cfcs/reactive/Observer.ts","../src/cfcs/core/utils.ts","../src/cfcs/reactive/utils.ts","../src/utils.ts","../src/Conveyer.ts","../src/index.umd.ts","../src/consts.ts","../src/reactive.ts","../src/cfcs/dom/utils.ts"],"sourcesContent":["export const OBSERVERS_PATH = \"__observers__\";\nexport const REACTIVE_PATH = \"__reactive__\";\n","import Component from \"@egjs/component\";\n\ninterface EmitterEvents<Value> {\n  update: (value: Value) => void;\n}\n\nexport class Observer<Value> {\n  private _current: Value;\n  private _emitter = new Component<EmitterEvents<Value>>();\n\n  constructor(value?: Value) {\n    this._current = value as any;\n  }\n  public get current() {\n    return this._current as Value;\n  }\n  public set current(value: Value) {\n    const isUpdate = value !== this._current;\n    this._current = value;\n\n    if (isUpdate) {\n      this._emitter.trigger(\"update\", value);\n    }\n  }\n  public subscribe(callback: (value: Value) => void) {\n    this._emitter.on(\"update\", callback);\n  }\n  public unsubscribe(callback?: (value: Value) => void) {\n    this._emitter.off(\"update\", callback);\n  }\n}\n","\nexport function keys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\n\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\n","import { OBSERVERS_PATH } from \"./const\";\nimport { Observer } from \"./Observer\";\nimport { ReactiveMethods } from \"./types\";\nimport { keys, Ref } from \"../core\";\n\nexport function withReactiveMethods<Instance, Names extends keyof Partial<Instance>, Return extends ReactiveMethods<Instance, Names>>(ref: Ref<Instance>, methods: readonly Names[]): Return {\n  const obj: Record<any, any> = {};\n\n  methods.forEach(name => {\n    obj[name] = function (...args: any[]) {\n      const current: any = ref.current || ref.value;\n\n      return current[name](...args);\n    };\n  });\n  return obj as Return;\n}\n\n\nexport function getObservers(instance: any): Record<string, Observer<any>> {\n  if (!instance[OBSERVERS_PATH]) {\n    instance[OBSERVERS_PATH] = {};\n  }\n  return instance[OBSERVERS_PATH];\n}\n\nexport function getObserver(instance: any, name: string, defaultValue?: any): Observer<any> {\n  const observers = getObservers(instance);\n\n  if (!observers[name]) {\n    observers[name] = new Observer(defaultValue);\n  }\n  return observers[name];\n}\n\nexport function Reactive(name?: string) {\n  return function (prototype: any, memberName: string) {\n    const publicName = name || memberName;\n\n    Object.defineProperty(prototype, memberName, {\n      get: function () {\n        return getObserver(this, publicName).current;\n      },\n      set: function (value: any) {\n        getObserver(this, publicName, value).current = value;\n      },\n    });\n    if (publicName !== memberName) {\n      Object.defineProperty(prototype, publicName, {\n        get: function () {\n          return getObserver(this, publicName).current;\n        },\n      });\n    }\n  };\n}\n\nexport function ReactiveSubscribe(Constructor: any) {\n  const prototype = Constructor.prototype;\n\n  prototype[\"subscribe\"] = function (name: string, callback: (value: any) => void) {\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).subscribe(callback);\n  };\n  prototype[\"unsubscribe\"] = function (name?: string, callback?: (value: any) => void) {\n    if (!name) {\n      keys(getObservers(this)).forEach((observerName) => {\n        this.unsubscribe(observerName);\n      });\n      return;\n    }\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).unsubscribe(callback);\n  };\n}\n\nexport interface ReactiveSubscribe<Properties extends Record<string, any>> {\n  subscribe<Name extends keyof Properties = keyof Properties>(name: Name, callback: (value: Properties[Name]) => void): void;\n  unsubscribe<Name extends keyof Properties = keyof Properties>(name?: Name, callback?: (value: Properties[Name]) => void): void;\n}\n","export function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\nexport function findIndex<T>(arr: T[], callback: (element: T, index: number) => boolean) {\n  const length = arr.length;\n\n  for (let i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n","import Axes, { PanInput } from \"@egjs/axes\";\nimport Component from \"@egjs/component\";\nimport { ReactiveSubscribe, Reactive, Ref } from \"./cfcs\";\nimport {\n  ConveyerEvents, ConveyerItem,\n  ConveyerOptions, FindItemOptions, ConveyerReactiveState,\n  ScrollIntoViewOptions,\n} from \"./types\";\nimport { isString } from \"./utils\";\n\n\n/**\n * Conveyer adds Drag gestures to your Native Scroll.\n * @ko Conveyer는 네이티브 스크롤에 드래그 제스처를 추가합니다.\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @example\n```html\n<div class=\"items\">\n  <div class=\"item\"></div>\n  <div class=\"item\"></div>\n  <div class=\"item\"></div>\n</div>\n<script>\nimport Conveyer from \"@egjs/conveyer\";\n\nconst conveyer = new Conveyer(\".items\");\n</script>\n```\n */\n@ReactiveSubscribe\nclass Conveyer extends Component<ConveyerEvents> {\n  protected scrollAreaElement: HTMLElement;\n\n  protected axes: Axes;\n  protected items: ConveyerItem[] = [];\n  protected pos = 0;\n  protected size = 0;\n  protected scrollSize = 0;\n  protected options: ConveyerOptions;\n\n  private _scrollTimer = 0;\n  private _isDragScroll = false;\n  private _isAnimation = false;\n  private _scrollArea: string | HTMLElement | Ref<HTMLElement>;\n\n  /**\n   * Whether the scroll has reached the start.\n   * @ko 스크롤이 시작에 닿았는지 여부.\n   * @name Conveyer#isReachStart\n   * @type {boolean}\n   * @default false\n   * @readonly\n   * @example\n   * ```js\n   * import { Conveyer } from \"@egjs/conveyer\";\n   *\n   * const conveyer = new Conveyer(\".container\");\n   *\n   * conveyer.isReachStart\n   * ```\n   */\n  @Reactive(\"isReachStart\") private _isReachStart = false;\n  /**\n   * Whether the scroll has reached the end.\n   * @ko 스크롤이 끝에 닿았는지 여부.\n   * @name Conveyer#isReachEnd\n   * @type {boolean}\n   * @default false\n   * @readonly\n   * @example\n   * ```js\n   * import { Conveyer } from \"@egjs/conveyer\";\n   *\n   * const conveyer = new Conveyer(\".container\");\n   *\n   * conveyer.isReachEnd\n   * ```\n   */\n  @Reactive(\"isReachEnd\") private _isReachEnd = false;\n  /**\n   * @param - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n   * @param - The option object of the InfiniteGrid module <ko>eg.InfiniteGrid 모듈의 옵션 객체</ko>\n   */\n  constructor(scrollArea: string | HTMLElement | Ref<HTMLElement>, options: ConveyerOptions = {}) {\n    super();\n    this.options = {\n      horizontal: true,\n      useDrag: true,\n      autoInit: true,\n      scrollDebounce: 100,\n      ...options,\n    };\n\n    this._scrollArea = scrollArea;\n    if (this.options.autoInit) {\n      this.init();\n    }\n  }\n  /**\n   * Finds an element for that direction.\n   * @ko 해당 방향에 대해 엘리먼트를 찾는다.\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `findElement` method. <ko>findElement 메서드의 옵션</ko>\n   * @example\n   * <h4>target</h4>\n   * <p align=\"center\">\n   *  <img src=\"/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public findElement(direction: \"start\" | \"end\" | \"prev\" | \"next\", options: FindItemOptions = {}) {\n    return this.findItem(direction, options)?.element || null;\n  }\n  /**\n   * Finds an item for an element or its direction.\n   * @ko 엘리먼트 또는 해당 방향에 대해 아이템을 찾는다.\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `findItem` method. <ko>`findItem` 메서드의 옵션</ko>\n   * @example\n   * <h4>target</h4>\n   * <p align=\"center\">\n   *  <img src=\"/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public findItem(target: HTMLElement | \"start\" | \"end\" | \"prev\" | \"next\", options: FindItemOptions = {}): ConveyerItem | null {\n    const pos = this.pos;\n    const scrollSize = this.scrollSize;\n    const size = this.size;\n    const hitTest = options?.hitTest ?? 1;\n    const items = [{ pos: 0, size: 0, }, ...this.items, { pos: scrollSize, size: 0 }];\n    const endPos = pos + size;\n    let sibling = options.sibling;\n    let selectedItem: ConveyerItem | undefined;\n\n\n    if (target === \"start\") {\n      if (pos <= 0) {\n        return null;\n      }\n      selectedItem = [...items].reverse().filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos - pos;\n        const dist2 = dist + itemSize;\n\n        return (dist >= 0) || (dist2 >= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse()[0];\n\n\n    } else if (target === \"end\") {\n      if (pos >= scrollSize - size) {\n        return null;\n      }\n      selectedItem = items.filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos + itemSize - endPos;\n        const dist2 = dist - itemSize;\n\n        return dist <= 0 || (dist2 <= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse()[0];\n    } else if (target === \"next\") {\n      selectedItem = items.reverse().filter(item => {\n        const itemSize = item.size;\n        const startDist = item.pos - pos;\n        const endDist = item.pos + itemSize - endPos;\n\n        return endDist > 0 && startDist > 0 && (!itemSize || Math.abs(startDist) / itemSize >= 1 - hitTest);\n      }).reverse()[0];\n    } else if (target === \"prev\") {\n      selectedItem = items.filter(item => {\n        const itemSize = item.size;\n        const startDist = item.pos - pos;\n        const endDist = item.pos + itemSize - endPos;\n\n        return startDist < 0 && endDist < 0 && (!itemSize || Math.abs(startDist) / itemSize >= 1 - hitTest);\n      }).reverse()[0];\n    } else {\n      return this._getItem(target);\n    }\n    if (sibling && selectedItem) {\n      const selectedIndex = items.indexOf(selectedItem);\n\n      return items[selectedIndex + sibling] || null;\n    }\n    return selectedItem || null;\n  }\n  /**\n   * Scrolls an element or an item in that direction into the view.\n   * @ko 엘리먼트나 해당 방향에 있는 아이템을 뷰안으로 스크롤을 한다.\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `scrollIntoView` method. <ko>`scrollIntoView` 메서드의 옵션</ko>\n   * @example\n   * <h4>target</h4>\n   * <p align=\"center\">\n   *  <img src=\"/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public scrollIntoView(target: HTMLElement | \"start\" | \"end\" | \"prev\" | \"next\", options: ScrollIntoViewOptions = {}) {\n    let item = this.findItem(target, options);\n\n    if (!item) {\n      return;\n    }\n    const duration = options.duration || 0;\n    let nextScrollPos = this._getNextScrollPos(item, options);\n\n    if (isString(target) && options.excludeStand && nextScrollPos === this.pos) {\n      const selectedIndex = this.items.indexOf(item);\n\n      if (selectedIndex === -1) {\n        return;\n      }\n      const sibling = target === \"start\" || target === \"prev\" ? -1 : 1;\n      item = this.items[selectedIndex + sibling];\n\n      if (!item) {\n        return;\n      }\n      nextScrollPos = this._getNextScrollPos(item, options);\n    }\n\n    this.scrollBy(nextScrollPos - this.pos, duration);\n  }\n  /**\n   * Scrolls by the given position amount.\n   * @ko 주어진 위치 양만큼 스크롤한다.\n   * @param - Amount of position to scroll by. <ko>스크롤할 위치의 양.</ko>\n   * @param - Duration to scroll by that position. <ko>해당 위치만큼 스크롤하는 시간</ko>\n   */\n  public scrollBy(pos: number, duration = 0) {\n    this.axes.setBy({ scroll: -pos }, duration);\n  }\n  /**\n   * Scroll to the given position.\n   * @ko 주어진 위치로 스크롤한다.\n   * @param - Amount of position to scroll to. <ko>스크롤할 위치의 양.</ko>\n   * @param - Duration to scroll to that position. <ko>해당 위치로 스크롤하는 시간</ko>\n   */\n  public scrollTo(pos: number, duration = 0) {\n    this.axes.setBy({ scroll: this.pos - pos }, duration);\n  }\n  /**\n   * Set the items directly to the Conveyer.\n   * @ko Conveyer에 아이템들을 직접 설정한다.\n   * @param - Items to set on Conveyer <ko>Conveyer에 설정할 아이템들</ko>\n   */\n  public setItems(items: ConveyerItem[]) {\n    this.items = items;\n  }\n  /**\n   * Update the position and size information of items.\n   * @ko 아이템들의 포지션, 사이즈 정보를 업데이트 한다.\n   */\n  public updateItems() {\n    const scrollAreaElement = this.scrollAreaElement;\n    const itemSelector = this.options.itemSelector;\n    const itemElements = [].slice.call(\n      itemSelector ? scrollAreaElement.querySelectorAll(itemSelector) : scrollAreaElement.children,\n    );\n    this.setItems(itemElements.map((el) => this._getItem(el)));\n  }\n  /**\n   * Update container size and scroll size.\n   * @ko 컨테이너의 크기, 스크롤 사이즈를 업데이트 한다.\n   */\n  public updateContainer() {\n    const scrollAreaElement = this.scrollAreaElement;\n    const horizontal = this.options.horizontal;\n\n    this.size = horizontal ? scrollAreaElement.clientWidth : scrollAreaElement.clientHeight;\n    this.scrollSize = horizontal ? scrollAreaElement.scrollWidth : scrollAreaElement.scrollHeight;\n    this._refreshScroll();\n    this._onScroll();\n  }\n  /**\n   * Updating containers and items.\n   * @ko 컨테이너와 아이템들을 업데이트 한다.\n   * @method\n   */\n  public update = () => {\n    this.updateItems();\n    this.updateContainer();\n  }\n  /**\n   * If you use the autoInit option as false, you can initialize it directly through the init method.\n   * @ko autoInit 옵션을 false로 사용하는 경우 직접 init 메서드를 통해 초기화 할 수 있다.\n   */\n  public init() {\n    if (this.axes) {\n      return;\n    }\n\n    const scrollArea = this._scrollArea;\n    let el!: HTMLElement;\n\n    if (isString(scrollArea)) {\n      el = document.querySelector<HTMLElement>(scrollArea)!;\n    } else if (scrollArea instanceof Element) {\n      el = scrollArea;\n    } else if (\"value\" in scrollArea || \"current\" in scrollArea) {\n      el = scrollArea.value! || scrollArea.current!;\n    }\n\n    this.scrollAreaElement = el;\n    let isDrag = false;\n    const scrollAreaElement = this.scrollAreaElement;\n    const axes = new Axes({\n      scroll: {\n        circular: true,\n        range: [-1000, 1000],\n      },\n    }, {\n      deceleration: 0.005,\n      round: 1,\n    });\n    let isHold = false;\n\n    axes.on({\n      \"hold\": e => {\n        isHold = true;\n        isDrag = false;\n        const inputEvent = e.inputEvent.srcEvent;\n\n        if (!inputEvent) {\n          return;\n        }\n        const options = this.options;\n        if (options.preventDefault) {\n          inputEvent.preventDefault();\n        }\n        if (options.preventClickOnDrag) {\n          this._disableClick();\n        }\n      },\n      \"change\": e => {\n        if (e.inputEvent && !isHold) {\n          return;\n        }\n        this._isDragScroll = !!e.inputEvent;\n        this._isAnimation = !!isHold;\n        isDrag = true;\n        const scroll = e.delta.scroll;\n\n        if (this.options.horizontal) {\n          scrollAreaElement.scrollLeft -= scroll;\n        } else {\n          scrollAreaElement.scrollTop -= scroll;\n        }\n      },\n      \"release\": e => {\n        if (!isDrag) {\n          e.setTo({ ...e.depaPos }, 0);\n          this._enableClick();\n        }\n        isDrag = false;\n      },\n    });\n\n    this.axes = axes;\n    if (this.options.useDrag) {\n      axes.connect(this.options.horizontal ? \"scroll\" : [\"\", \"scroll\"], new PanInput(scrollAreaElement, {\n        inputType: [\"mouse\"],\n      }));\n    }\n    scrollAreaElement.addEventListener(\"scroll\", this._onScroll);\n    window.addEventListener(\"resize\", this.update);\n\n    this.update();\n  }\n  /**\n   * Releases the instnace and events.\n   * @ko 인스턴스와 이벤트를 해제한다.\n   */\n  public destroy() {\n    this.axes?.destroy();\n    this.unsubscribe();\n    this.scrollAreaElement?.removeEventListener(\"scroll\", this._onScroll);\n    window.removeEventListener(\"resize\", this.update);\n    this.off();\n  }\n  private _refreshScroll() {\n    const horizontal = this.options.horizontal;\n    const scrollAreaElement = this.scrollAreaElement;\n    this.pos = horizontal ? scrollAreaElement.scrollLeft : scrollAreaElement.scrollTop;\n  }\n  private _getItem(element: HTMLElement): ConveyerItem {\n    const horizontal = this.options.horizontal;\n\n    return {\n      element,\n      pos: horizontal ? element.offsetLeft : element.offsetTop,\n      size: horizontal ? element.offsetWidth : element.offsetHeight,\n    };\n  }\n  private _getNextScrollPos(item: ConveyerItem, options: ScrollIntoViewOptions) {\n    const size = this.size;\n    const align = options.align || \"start\";\n    const padding = options.offset || 0;\n    const itemPos = item!.pos;\n    const itemSize = item!.size;\n    let scrollPos = 0;\n\n    if (align === \"start\") {\n      scrollPos = itemPos - padding;\n    } else if (align === \"end\") {\n      scrollPos = itemPos + itemSize - size + padding;\n    } else if (align === \"center\") {\n      scrollPos = itemPos + itemSize / 2 - size / 2 + padding;\n    }\n    return scrollPos;\n  }\n  private _onScroll = (e?: any) => {\n    if (e) {\n      this._debounceScroll();\n    }\n    this._refreshScroll();\n\n    const size = this.size;\n    const scrollSize = this.scrollSize;\n    const pos = this.pos;\n\n    // enter start\n    if (pos <= 0 && this.isReachStart !== true) {\n      this._isReachStart = true;\n      /**\n       * This event is fired when scroll reach start.\n       * @ko 스크롤이 앞에 닿으면 발생하는 이벤트이다.\n       * @event Conveyer#reachStart\n       */\n      this.trigger(\"reachStart\");\n    } else if (pos > 0 && this.isReachStart !== false) {\n      this._isReachStart = false;\n      /**\n       * This event is fired when scroll leave start.\n       * @ko 스크롤이 앞에서 떠나면 발생하는 이벤트이다.\n       * @event Conveyer#leaveStart\n       */\n      this.trigger(\"leaveStart\");\n    }\n    // enter end\n    if (pos >= scrollSize - size && this.isReachEnd !== true) {\n      this._isReachEnd = true;\n      /**\n       * This event is fired when scroll reach end.\n       * @ko 스크롤이 끝에 닿으면 발생하는 이벤트이다.\n       * @event Conveyer#reachEnd\n       */\n      this.trigger(\"reachEnd\");\n    } else if (pos < scrollSize - size && this.isReachEnd !== false) {\n      this._isReachEnd = false;\n      /**\n       * This event is fired when scroll leave end.\n       * @ko 스크롤이 끝에서 떠나면 발생하는 이벤트이다.\n       * @event Conveyer#leaveEnd\n       */\n      this.trigger(\"leaveEnd\");\n    }\n  }\n  private _onPreventClick = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n    this._enableClick();\n  }\n  private _enableClick() {\n    window.removeEventListener(\"click\", this._onPreventClick, true);\n  }\n  private _disableClick() {\n    window.addEventListener(\"click\", this._onPreventClick, true);\n  }\n  private _debounceScroll() {\n    if (!this._scrollTimer) {\n      /**\n       * This event is fired when begin scroll.\n       * @ko 스크롤이 시작하면 발생하는 이벤트이다.\n       * @event Conveyer#beginScroll\n       */\n      this.trigger(\"beginScroll\");\n    }\n    window.clearTimeout(this._scrollTimer);\n    this._scrollTimer = window.setTimeout(() => {\n      this._scrollTimer = 0;\n      /**\n       * This event is fired when finish scroll.\n       * @ko 스크롤이 끝나면 발생하는 이벤트이다.\n       * @event Conveyer#finishScroll\n       * @param {OnFinishScroll} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n       */\n      this.trigger(\"finishScroll\", {\n        isDragScroll: this._isDragScroll,\n        isTrusted: this._isDragScroll || !this._isAnimation,\n      });\n\n      this._isDragScroll = false;\n      this._isAnimation = false;\n    }, this.options.scrollDebounce);\n  }\n}\n\n\ninterface Conveyer extends ConveyerReactiveState, ReactiveSubscribe<ConveyerReactiveState> { }\n\nexport default Conveyer;\n","import Conveyer, * as modules from \"./index\";\n\nfor (const name in modules) {\n  (Conveyer as any)[name] = (modules as any)[name];\n}\n\nexport default Conveyer;\n","export const CONVEYER_METHODS = [\n  \"update\",\n  \"scrollBy\",\n  \"scrollTo\",\n  \"scrollIntoView\",\n  \"setItems\",\n  \"updateContainer\",\n  \"updateItems\",\n  \"init\"\n] as const;\n\nexport const CONVEYER_EVENTS = [\n  \"reachStart\",\n  \"reachEnd\",\n  \"leaveStart\",\n  \"leaveEnd\",\n  \"beginScroll\",\n  \"finishScroll\",\n] as const;\n\nexport const CONVEYER_REACTIVE_STATE = {\n  \"isReachStart\": false,\n  \"isReachEnd\": false,\n } as const;\n","import Conveyer from \"./Conveyer\";\nimport { CONVEYER_EVENTS, CONVEYER_METHODS, CONVEYER_REACTIVE_STATE } from \"./consts\";\nimport { ReactiveAdapter, ReactiveSubscribe, Ref } from \"./cfcs\";\nimport { ConveyerEvents, ConveyerMethods, ConveyerOptions, ConveyerReactiveState } from \"./types\";\n\n\nexport interface ConveyerData {\n  container: Ref<HTMLElement>;\n  props: ConveyerOptions;\n}\n\nexport const REACTIVE_CONVEYER: ReactiveAdapter<\n  Conveyer,\n  ConveyerReactiveState,\n  keyof ConveyerMethods,\n  ConveyerData,\n  ConveyerEvents\n> = {\n  state: CONVEYER_REACTIVE_STATE,\n  methods: CONVEYER_METHODS,\n  events: CONVEYER_EVENTS,\n  instance(data) {\n    return new Conveyer(data.container, { ...data.props, autoInit: false });\n  },\n  init(instance, data) {\n    if (data.props.autoInit !== false) {\n      instance.init();\n    }\n  },\n  on(instance, name, callback) {\n    instance.on(name, callback);\n  },\n  off(instance, name, callback) {\n    instance.off(name, callback);\n  },\n  destroy(instance) {\n    instance.destroy();\n  },\n};\n","\nexport function withClassMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n"],"names":["OBSERVERS_PATH","Object","this","_current","value","isUpdate","_emitter","trigger","callback","on","off","Component","keys","obj","getObservers","instance","getObserver","name","defaultValue","observers","Observer","Reactive","prototype","memberName","publicName","defineProperty","get","current","set","ReactiveSubscribe","Constructor","subscribe","unsubscribe","forEach","observerName","_this","isString","val","scrollArea","options","_super","updateItems","updateContainer","e","_debounceScroll","_refreshScroll","size","scrollSize","pos","isReachStart","_isReachStart","isReachEnd","_isReachEnd","stopPropagation","preventDefault","_enableClick","horizontal","useDrag","autoInit","scrollDebounce","_scrollArea","init","__extends","direction","findItem","element","target","selectedItem","hitTest","items","endPos","sibling","__spreadArray","reverse","filter","item","itemSize","dist","dist2","Math","abs","startDist","_getItem","endDist","selectedIndex","indexOf","duration","nextScrollPos","_getNextScrollPos","excludeStand","scrollBy","axes","setBy","scroll","scrollAreaElement","itemSelector","itemElements","slice","call","querySelectorAll","children","setItems","map","el","clientWidth","clientHeight","scrollWidth","scrollHeight","_onScroll","isDrag","isHold","document","querySelector","Element","Axes","circular","range","deceleration","round","inputEvent","srcEvent","preventClickOnDrag","_disableClick","_isDragScroll","_isAnimation","delta","scrollLeft","scrollTop","setTo","depaPos","connect","PanInput","inputType","addEventListener","window","update","destroy","removeEventListener","offsetLeft","offsetTop","offsetWidth","offsetHeight","align","padding","offset","itemPos","scrollPos","_onPreventClick","_scrollTimer","clearTimeout","setTimeout","isDragScroll","isTrusted","__decorate","Conveyer","CONVEYER_METHODS","CONVEYER_EVENTS","CONVEYER_REACTIVE_STATE","REACTIVE_CONVEYER","state","methods","events","data","container","props","ref","_i","args","result","_a","str","replace","all","letter","toUpperCase","modules"],"mappings":"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"}