{"version":3,"file":"conveyer.min.js","sources":["../src/browser.ts","../src/cfcs/reactive/const.ts","../src/cfcs/reactive/Observer.ts","../src/cfcs/core/utils.ts","../src/cfcs/reactive/utils.ts","../src/utils.ts","../src/Conveyer.ts","../src/index.umd.ts","../src/consts.ts","../src/reactive.ts","../src/cfcs/dom/utils.ts"],"sourcesContent":["/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nexport const IS_IE = /msie|trident/g.test(\n  (typeof window !== \"undefined\" && window?.navigator?.userAgent?.toLowerCase()) || \"\",\n);\n","export const OBSERVERS_PATH = \"__observers__\";\nexport const REACTIVE_PATH = \"__reactive__\";\n","import Component from \"@egjs/component\";\n\ninterface EmitterEvents<Value> {\n  update: (value: Value) => void;\n}\n\nexport class Observer<Value> {\n  private _current: Value;\n  private _emitter = new Component<EmitterEvents<Value>>();\n\n  constructor(value?: Value) {\n    this._current = value as any;\n  }\n  public get current() {\n    return this._current as Value;\n  }\n  public set current(value: Value) {\n    const isUpdate = value !== this._current;\n    this._current = value;\n\n    if (isUpdate) {\n      this._emitter.trigger(\"update\", value);\n    }\n  }\n  public subscribe(callback: (value: Value) => void) {\n    this._emitter.on(\"update\", callback);\n  }\n  public unsubscribe(callback?: (value: Value) => void) {\n    this._emitter.off(\"update\", callback);\n  }\n}\n","\nexport function keys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\n\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\n","import { OBSERVERS_PATH } from \"./const\";\nimport { Observer } from \"./Observer\";\nimport { ReactiveMethods } from \"./types\";\nimport { keys, Ref } from \"../core\";\n\nexport function withReactiveMethods<\n  Instance,\n  Names extends keyof Partial<Instance>,\n  Return extends ReactiveMethods<Instance, Names>\n>(ref: Ref<Instance>, methods: readonly Names[]): Return {\n  const obj: Record<any, any> = {};\n\n  methods.forEach(name => {\n    obj[name] = function (...args: any[]) {\n      const current: any = ref.current || ref.value;\n\n      return current[name](...args);\n    };\n  });\n  return obj as Return;\n}\n\n\nexport function getObservers(instance: any): Record<string, Observer<any>> {\n  if (!instance[OBSERVERS_PATH]) {\n    instance[OBSERVERS_PATH] = {};\n  }\n  return instance[OBSERVERS_PATH];\n}\n\nexport function getObserver(instance: any, name: string, defaultValue?: any): Observer<any> {\n  const observers = getObservers(instance);\n\n  if (!observers[name]) {\n    observers[name] = new Observer(defaultValue);\n  }\n  return observers[name];\n}\n\nexport function Reactive(name?: string) {\n  return function (prototype: any, memberName: string) {\n    const publicName = name || memberName;\n\n    Object.defineProperty(prototype, memberName, {\n      get: function () {\n        return getObserver(this, publicName).current;\n      },\n      set: function (value: any) {\n        getObserver(this, publicName, value).current = value;\n      },\n    });\n    if (publicName !== memberName) {\n      Object.defineProperty(prototype, publicName, {\n        get: function () {\n          return getObserver(this, publicName).current;\n        },\n      });\n    }\n  };\n}\n\nexport function ReactiveSubscribe(Constructor: any) {\n  const prototype = Constructor.prototype;\n\n  prototype[\"subscribe\"] = function (name: string, callback: (value: any) => void) {\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).subscribe(callback);\n  };\n  prototype[\"unsubscribe\"] = function (name?: string, callback?: (value: any) => void) {\n    if (!name) {\n      keys(getObservers(this)).forEach((observerName) => {\n        this.unsubscribe(observerName);\n      });\n      return;\n    }\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).unsubscribe(callback);\n  };\n}\n\nexport interface ReactiveSubscribe<Properties extends Record<string, any>> {\n  subscribe<Name extends keyof Properties = keyof Properties>(\n    name: Name, callback: (value: Properties[Name]) => void): void;\n  unsubscribe<Name extends keyof Properties = keyof Properties>(\n    name?: Name, callback?: (value: Properties[Name]) => void): void;\n}\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\nexport function findIndex<T>(arr: T[], callback: (element: T, index: number) => boolean) {\n  const length = arr.length;\n\n  for (let i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nimport Axes, { PanInput } from \"@egjs/axes\";\nimport Component from \"@egjs/component\";\nimport { IS_IE } from \"./browser\";\nimport { ReactiveSubscribe, Reactive, Ref } from \"./cfcs\";\nimport {\n  ConveyerEvents, ConveyerItem,\n  ConveyerOptions, FindItemOptions, ConveyerReactiveState,\n  ScrollIntoViewOptions,\n} from \"./types\";\nimport { isString } from \"./utils\";\n\n\n/**\n * Conveyer adds Drag gestures to your Native Scroll.\n * @ko Conveyer는 네이티브 스크롤에 드래그 제스처를 추가합니다.\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @example\n```html\n<div class=\"items\">\n  <div class=\"item\"></div>\n  <div class=\"item\"></div>\n  <div class=\"item\"></div>\n</div>\n<script>\nimport Conveyer from \"@egjs/conveyer\";\n\nconst conveyer = new Conveyer(\".items\");\n</script>\n```\n */\n@ReactiveSubscribe\nclass Conveyer extends Component<ConveyerEvents> {\n  protected _scrollAreaElement: HTMLElement;\n  protected _axes: Axes;\n  protected _items: ConveyerItem[] = [];\n  protected _size = 0;\n  protected _scrollSize = 0;\n  protected _options: ConveyerOptions;\n\n  private _scrollTimer = 0;\n  private _isDragScroll = false;\n  private _isAnimation = false;\n  private _scrollArea: string | HTMLElement | Ref<HTMLElement>;\n\n  /**\n   * Whether the scroll has reached the start.\n   * @ko 스크롤이 시작에 닿았는지 여부.\n   * @name Conveyer#isReachStart\n   * @type {boolean}\n   * @default false\n   * @readonly\n   * @example\n   * ```js\n   * import { Conveyer } from \"@egjs/conveyer\";\n   *\n   * const conveyer = new Conveyer(\".container\");\n   *\n   * conveyer.isReachStart\n   * ```\n   */\n  @Reactive(\"isReachStart\") private _isReachStart = false;\n  /**\n   * Whether the scroll has reached the end.\n   * @ko 스크롤이 끝에 닿았는지 여부.\n   * @name Conveyer#isReachEnd\n   * @type {boolean}\n   * @default false\n   * @readonly\n   * @example\n   * ```js\n   * import { Conveyer } from \"@egjs/conveyer\";\n   *\n   * const conveyer = new Conveyer(\".container\");\n   *\n   * conveyer.isReachEnd\n   * ```\n   */\n  @Reactive(\"isReachEnd\") private _isReachEnd = false;\n  /**\n   * the scroll position of the container\n   * @ko 컨테이너의 스크롤 위치\n   * @name Conveyer#scrollPos\n   * @type {number}\n   * @default 0\n   * @readonly\n   * @example\n   * ```js\n   * import { Conveyer } from \"@egjs/conveyer\";\n   *\n   * const conveyer = new Conveyer(\".container\");\n   *\n   * conveyer.scrollPos\n   * ```\n   */\n  @Reactive(\"scrollPos\") protected _pos = 0;\n  /**\n   * @param - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n   * @param - The option object of the InfiniteGrid module <ko>eg.InfiniteGrid 모듈의 옵션 객체</ko>\n   */\n  constructor(scrollArea: string | HTMLElement | Ref<HTMLElement>, options: ConveyerOptions = {}) {\n    super();\n    this._options = {\n      horizontal: true,\n      useDrag: true,\n      autoInit: true,\n      scrollDebounce: 100,\n      ...options,\n    };\n\n    this._scrollArea = scrollArea;\n    if (this._options.autoInit) {\n      this.init();\n    }\n  }\n  /**\n   * Finds an element for that direction.\n   * @ko 해당 방향에 대해 엘리먼트를 찾는다.]\n   * @see {@link /docs/examples/Methods direction's example} page for detailed information\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `findElement` method. <ko>findElement 메서드의 옵션</ko>\n   * @example\n   * <p align=\"center\">\n   *  <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public findElement(direction: \"start\" | \"end\" | \"prev\" | \"next\", options: FindItemOptions = {}) {\n    return this.findItem(direction, options)?.element || null;\n  }\n  /**\n   * Finds an item for an element or its direction.\n   * @ko 엘리먼트 또는 해당 방향에 대해 아이템을 찾는다.\n   * @see {@link /docs/examples/Methods direction's example} page for detailed information\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `findItem` method. <ko>`findItem` 메서드의 옵션</ko>\n   * @example\n   * <p align=\"center\">\n   *  <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public findItem(\n    target: HTMLElement | \"start\" | \"end\" | \"prev\" | \"next\",\n    options: FindItemOptions = {},\n  ): ConveyerItem | null {\n    const pos = this._pos;\n    const scrollSize = this._scrollSize;\n    const size = this._size;\n    const hitTest = options?.hitTest ?? 1;\n    const items = [...this._items];\n    const length = items.length;\n    const endPos = pos + size;\n    const sibling = options.sibling;\n    const startVirtualItem = { pos: 0, size: 0 };\n    const endVirtualItem = { pos: scrollSize, size: 0 };\n\n    if (items[0].pos > 0) {\n      items.unshift(startVirtualItem);\n    }\n    if (length && items[length - 1].pos + items[length - 1].size < scrollSize) {\n      items.push(endVirtualItem);\n    }\n    let selectedItem: ConveyerItem | undefined;\n\n\n    if (target === \"start\") {\n      if (pos < 0) {\n        return null;\n      }\n      const selectedItems = [...items].reverse().filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos - pos;\n        const dist2 = dist + itemSize;\n\n        return (dist >= 0) || (dist2 >= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse();\n\n      selectedItem = (selectedItems[0] === startVirtualItem && selectedItems[1]) || selectedItems[0];\n    } else if (target === \"end\") {\n      if (pos > scrollSize - size) {\n        return null;\n      }\n      const selectedItems = items.filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos + itemSize - endPos;\n        const dist2 = dist - itemSize;\n\n        return dist <= 0 || (dist2 <= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse();\n\n      selectedItem = (selectedItems[0] === endVirtualItem && selectedItems[1]) || selectedItems[0];\n    } else if (target === \"prev\") {\n      selectedItem = items.filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos + itemSize - pos;\n        const dist2 = dist - itemSize;\n\n        return dist <= 0 || (dist2 <= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse()[0];\n    } else if (target === \"next\") {\n      selectedItem = items.reverse().filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos - endPos;\n        const dist2 = dist + itemSize;\n\n        return dist >= 0 || (dist2 >= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse()[0];\n    } else {\n      return this._getItem(target);\n    }\n    if (sibling && selectedItem) {\n      const selectedIndex = items.indexOf(selectedItem);\n\n      if (selectedIndex > -1) {\n        selectedItem = items[selectedIndex + sibling];\n      }\n    }\n    return selectedItem || null;\n  }\n  /**\n   * Scrolls an element or an item in that direction into the view.\n   * @ko 엘리먼트나 해당 방향에 있는 아이템을 뷰안으로 스크롤을 한다.\n   * @see {@link /docs/examples/Methods target's example} page for detailed information\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `scrollIntoView` method. <ko>`scrollIntoView` 메서드의 옵션</ko>\n   * @example\n   * <p align=\"center\">\n   *  <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public scrollIntoView(target: HTMLElement | \"start\" | \"end\" | \"prev\" | \"next\", options: ScrollIntoViewOptions = {}) {\n    let item = this.findItem(target, options);\n\n    if (!item) {\n      return;\n    }\n    const duration = options.duration || 0;\n    let nextScrollPos = this._getNextScrollPos(item, options);\n\n    if (isString(target) && options.excludeStand && nextScrollPos === this._pos) {\n      const selectedIndex = this._items.indexOf(item);\n\n      if (selectedIndex === -1) {\n        return;\n      }\n      const sibling = target === \"start\" || target === \"prev\" ? -1 : 1;\n      item = this._items[selectedIndex + sibling];\n\n      if (!item) {\n        return;\n      }\n      nextScrollPos = this._getNextScrollPos(item, options);\n    }\n\n    this.scrollBy(nextScrollPos - this._pos, duration);\n  }\n  /**\n   * Scrolls by the given position amount.\n   * @ko 주어진 위치 양만큼 스크롤한다.\n   * @param - Amount of position to scroll by. <ko>스크롤할 위치의 양.</ko>\n   * @param - Duration to scroll by that position. <ko>해당 위치만큼 스크롤하는 시간</ko>\n   */\n  public scrollBy(pos: number, duration = 0) {\n    this._axes.setBy({ scroll: -pos }, duration);\n  }\n  /**\n   * Scroll to the given position.\n   * @ko 주어진 위치로 스크롤한다.\n   * @param - Amount of position to scroll to. <ko>스크롤할 위치의 양.</ko>\n   * @param - Duration to scroll to that position. <ko>해당 위치로 스크롤하는 시간</ko>\n   */\n  public scrollTo(pos: number, duration = 0) {\n    this._axes.setBy({ scroll: this._pos - pos }, duration);\n  }\n  /**\n   * Set the items directly to the Conveyer.\n   * @ko Conveyer에 아이템들을 직접 설정한다.\n   * @param - Items to set on Conveyer <ko>Conveyer에 설정할 아이템들</ko>\n   */\n  public setItems(items: ConveyerItem[]) {\n    this._items = items;\n  }\n  /**\n   * Update the position and size information of items.\n   * @ko 아이템들의 포지션, 사이즈 정보를 업데이트 한다.\n   */\n  public updateItems() {\n    const scrollAreaElement = this._scrollAreaElement;\n    const itemSelector = this._options.itemSelector;\n    const itemElements = [].slice.call(\n      itemSelector ? scrollAreaElement.querySelectorAll(itemSelector) : scrollAreaElement.children,\n    );\n    this.setItems(itemElements.map((el) => this._getItem(el)));\n  }\n  /**\n   * Update container size and scroll size.\n   * @ko 컨테이너의 크기, 스크롤 사이즈를 업데이트 한다.\n   */\n  public updateContainer() {\n    const scrollAreaElement = this._scrollAreaElement;\n    const horizontal = this._options.horizontal;\n\n    const size = horizontal ? scrollAreaElement.clientWidth : scrollAreaElement.clientHeight;\n    let scrollSize = horizontal ? scrollAreaElement.scrollWidth : scrollAreaElement.scrollHeight;\n\n    // check decimal point\n    if (IS_IE && scrollSize === size + 1) {\n      const style = getComputedStyle(scrollAreaElement);\n      const boxSizing = style.boxSizing;\n      const borderSize = horizontal\n        ? (parseFloat(style.borderLeftWidth) || 0) + (parseFloat(style.borderRightWidth) || 0)\n        : (parseFloat(style.borderTopWidth) || 0) + (parseFloat(style.borderBottomWidth) || 0);\n      const cssSize = parseFloat(horizontal ? style.width : style.height) || 0;\n      const contentSize = cssSize - (boxSizing === \"border-box\" ? borderSize : 0);\n\n      // 0 < 0.5 && 0.5 < 1\n      if (size < contentSize && contentSize < size + 1) {\n        scrollSize = size;\n      }\n    }\n    this._size = size;\n    this._scrollSize = scrollSize;\n    this._refreshScroll();\n    this._onScroll();\n  }\n  /**\n   * Updating containers and items.\n   * @ko 컨테이너와 아이템들을 업데이트 한다.\n   * @method\n   */\n  public update = () => {\n    this.updateItems();\n    this.updateContainer();\n  }\n  /**\n   * If you use the autoInit option as false, you can initialize it directly through the init method.\n   * @ko autoInit 옵션을 false로 사용하는 경우 직접 init 메서드를 통해 초기화 할 수 있다.\n   */\n  public init() {\n    if (this._axes) {\n      return;\n    }\n\n    const scrollArea = this._scrollArea;\n    let el!: HTMLElement;\n\n    if (isString(scrollArea)) {\n      el = document.querySelector<HTMLElement>(scrollArea)!;\n    } else if (scrollArea instanceof Element) {\n      el = scrollArea;\n    } else if (\"value\" in scrollArea || \"current\" in scrollArea) {\n      el = scrollArea.value! || scrollArea.current!;\n    }\n\n    this._scrollAreaElement = el;\n    let isDrag = false;\n    const scrollAreaElement = this._scrollAreaElement;\n    const axes = new Axes({\n      scroll: {\n        circular: true,\n        range: [-1000, 1000],\n      },\n    }, {\n      deceleration: 0.005,\n      round: 1,\n    });\n    let isHold = false;\n\n    axes.on({\n      \"hold\": e => {\n        isHold = true;\n        isDrag = false;\n        const inputEvent = e.inputEvent.srcEvent;\n\n        if (!inputEvent) {\n          return;\n        }\n        const options = this._options;\n        if (options.preventDefault) {\n          inputEvent.preventDefault();\n        }\n        if (options.preventClickOnDrag) {\n          this._disableClick();\n        }\n      },\n      \"change\": e => {\n        if (e.inputEvent && !isHold) {\n          return;\n        }\n        this._isDragScroll = !!e.inputEvent;\n        this._isAnimation = !!isHold;\n        isDrag = true;\n        const scroll = e.delta.scroll;\n\n        if (this._options.horizontal) {\n          scrollAreaElement.scrollLeft -= scroll;\n        } else {\n          scrollAreaElement.scrollTop -= scroll;\n        }\n      },\n      \"release\": e => {\n        if (!isDrag) {\n          e.setTo({ ...e.depaPos }, 0);\n          this._enableClick();\n        }\n        isDrag = false;\n      },\n    });\n\n    this._axes = axes;\n    if (this._options.useDrag) {\n      axes.connect(this._options.horizontal ? [\"scroll\", \"\"] : [\"\", \"scroll\"], new PanInput(scrollAreaElement, {\n        inputType: [\"mouse\"],\n        hammerManagerOptions: {\n          touchAction: \"auto\",\n        },\n      }));\n    }\n    scrollAreaElement.addEventListener(\"scroll\", this._onScroll);\n    window.addEventListener(\"resize\", this.update);\n\n    this.update();\n  }\n  /**\n   * Releases the instnace and events.\n   * @ko 인스턴스와 이벤트를 해제한다.\n   */\n  public destroy() {\n    this._axes?.destroy();\n    this.unsubscribe();\n    this._scrollAreaElement?.removeEventListener(\"scroll\", this._onScroll);\n    window.removeEventListener(\"resize\", this.update);\n    this.off();\n  }\n  private _refreshScroll() {\n    const horizontal = this._options.horizontal;\n    const scrollAreaElement = this._scrollAreaElement;\n\n    this._pos = Math.min(\n      this._scrollSize - this._size,\n      horizontal ? scrollAreaElement.scrollLeft : scrollAreaElement.scrollTop,\n    );\n  }\n  private _getItem(element: HTMLElement): ConveyerItem {\n    const horizontal = this._options.horizontal;\n\n    return {\n      element,\n      pos: horizontal ? element.offsetLeft : element.offsetTop,\n      size: horizontal ? element.offsetWidth : element.offsetHeight,\n    };\n  }\n  private _getNextScrollPos(item: ConveyerItem, options: ScrollIntoViewOptions) {\n    const size = this._size;\n    const align = options.align || \"start\";\n    const padding = options.offset || 0;\n    const itemPos = item!.pos;\n    const itemSize = item!.size;\n    let scrollPos = 0;\n\n    if (align === \"start\") {\n      scrollPos = itemPos - padding;\n    } else if (align === \"end\") {\n      scrollPos = itemPos + itemSize - size + padding;\n    } else if (align === \"center\") {\n      scrollPos = itemPos + itemSize / 2 - size / 2 + padding;\n    }\n    return scrollPos;\n  }\n  private _onScroll = (e?: any) => {\n    if (e) {\n      this._debounceScroll();\n    }\n    this._refreshScroll();\n\n    const size = this._size;\n    const scrollSize = this._scrollSize;\n    const pos = this._pos;\n\n    // enter start\n    if (pos <= 0 && this.isReachStart !== true) {\n      this._isReachStart = true;\n      /**\n       * This event is fired when scroll reach start.\n       * @ko 스크롤이 앞에 닿으면 발생하는 이벤트이다.\n       * @event Conveyer#reachStart\n       */\n      this.trigger(\"reachStart\");\n    } else if (pos > 0 && this.isReachStart !== false) {\n      this._isReachStart = false;\n      /**\n       * This event is fired when scroll leave start.\n       * @ko 스크롤이 앞에서 떠나면 발생하는 이벤트이다.\n       * @event Conveyer#leaveStart\n       */\n      this.trigger(\"leaveStart\");\n    }\n    // enter end\n    if (pos >= scrollSize - size && this.isReachEnd !== true) {\n      this._isReachEnd = true;\n      /**\n       * This event is fired when scroll reach end.\n       * @ko 스크롤이 끝에 닿으면 발생하는 이벤트이다.\n       * @event Conveyer#reachEnd\n       */\n      this.trigger(\"reachEnd\");\n    } else if (pos < scrollSize - size && this.isReachEnd !== false) {\n      this._isReachEnd = false;\n      /**\n       * This event is fired when scroll leave end.\n       * @ko 스크롤이 끝에서 떠나면 발생하는 이벤트이다.\n       * @event Conveyer#leaveEnd\n       */\n      this.trigger(\"leaveEnd\");\n    }\n  }\n  private _onPreventClick = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n    this._enableClick();\n  }\n  private _enableClick() {\n    window.removeEventListener(\"click\", this._onPreventClick, true);\n  }\n  private _disableClick() {\n    window.addEventListener(\"click\", this._onPreventClick, true);\n  }\n  private _debounceScroll() {\n    if (!this._scrollTimer) {\n      /**\n       * This event is fired when begin scroll.\n       * @ko 스크롤이 시작하면 발생하는 이벤트이다.\n       * @event Conveyer#beginScroll\n       */\n      this.trigger(\"beginScroll\");\n    }\n    window.clearTimeout(this._scrollTimer);\n    this._scrollTimer = window.setTimeout(() => {\n      this._scrollTimer = 0;\n      /**\n       * This event is fired when finish scroll.\n       * @ko 스크롤이 끝나면 발생하는 이벤트이다.\n       * @event Conveyer#finishScroll\n       * @param {OnFinishScroll} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n       */\n      this.trigger(\"finishScroll\", {\n        isDragScroll: this._isDragScroll,\n        isTrusted: this._isDragScroll || !this._isAnimation,\n      });\n\n      this._isDragScroll = false;\n      this._isAnimation = false;\n    }, this._options.scrollDebounce);\n  }\n}\n\n\ninterface Conveyer extends ConveyerReactiveState, ReactiveSubscribe<ConveyerReactiveState> { }\n\nexport default Conveyer;\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nimport Conveyer, * as modules from \"./index\";\n\nfor (const name in modules) {\n  (Conveyer as any)[name] = (modules as any)[name];\n}\n\nexport default Conveyer;\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nexport const CONVEYER_METHODS = [\n  \"update\",\n  \"findElement\",\n  \"findItem\",\n  \"scrollBy\",\n  \"scrollTo\",\n  \"scrollIntoView\",\n  \"setItems\",\n  \"updateContainer\",\n  \"updateItems\",\n  \"init\",\n] as const;\n\nexport const CONVEYER_EVENTS = [\n  \"reachStart\",\n  \"reachEnd\",\n  \"leaveStart\",\n  \"leaveEnd\",\n  \"beginScroll\",\n  \"finishScroll\",\n] as const;\n\nexport const CONVEYER_REACTIVE_STATE = {\n  \"isReachStart\": false,\n  \"isReachEnd\": false,\n  \"scrollPos\": 0,\n} as const;\n\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nimport Conveyer from \"./Conveyer\";\nimport { CONVEYER_EVENTS, CONVEYER_METHODS, CONVEYER_REACTIVE_STATE } from \"./consts\";\nimport { ReactiveAdapter, Ref } from \"./cfcs\";\nimport { ConveyerEvents, ConveyerMethods, ConveyerOptions, ConveyerReactiveState } from \"./types\";\n\n\nexport interface ConveyerData {\n  container: Ref<HTMLElement>;\n  props: ConveyerOptions;\n}\n\nexport const REACTIVE_CONVEYER: ReactiveAdapter<\n  Conveyer,\n  ConveyerReactiveState,\n  keyof ConveyerMethods,\n  ConveyerData,\n  ConveyerEvents\n> = {\n  state: CONVEYER_REACTIVE_STATE,\n  methods: CONVEYER_METHODS,\n  events: CONVEYER_EVENTS,\n  instance(data) {\n    return new Conveyer(data.container, { ...data.props, autoInit: false });\n  },\n  init(instance, data) {\n    if (data.props.autoInit !== false) {\n      instance.init();\n    }\n  },\n  on(instance, name, callback) {\n    instance.on(name, callback);\n  },\n  off(instance, name, callback) {\n    instance.off(name, callback);\n  },\n  destroy(instance) {\n    instance.destroy();\n  },\n};\n","\nexport function withClassMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n"],"names":["IS_IE","test","window","navigator","userAgent","toLowerCase","OBSERVERS_PATH","value","Component","_current","Object","this","isUpdate","_emitter","trigger","callback","on","off","keys","obj","getObservers","instance","getObserver","name","defaultValue","observers","Observer","Reactive","prototype","memberName","publicName","defineProperty","get","current","set","ReactiveSubscribe","Constructor","subscribe","unsubscribe","forEach","observerName","_this","isString","val","__extends","scrollArea","options","_super","updateItems","updateContainer","e","_debounceScroll","_refreshScroll","size","_size","scrollSize","_scrollSize","pos","_pos","isReachStart","_isReachStart","isReachEnd","_isReachEnd","stopPropagation","preventDefault","_enableClick","_options","horizontal","useDrag","autoInit","scrollDebounce","_scrollArea","init","direction","findItem","element","target","hitTest","items","_items","length","endPos","sibling","startVirtualItem","endVirtualItem","unshift","push","selectedItems","selectedItem","__spreadArray","reverse","filter","item","itemSize","dist","dist2","Math","abs","_getItem","selectedIndex","indexOf","duration","nextScrollPos","_getNextScrollPos","excludeStand","scrollBy","_axes","setBy","scroll","scrollAreaElement","_scrollAreaElement","itemSelector","itemElements","slice","call","querySelectorAll","children","setItems","map","el","boxSizing","borderSize","clientWidth","clientHeight","scrollWidth","scrollHeight","style","getComputedStyle","parseFloat","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","contentSize","width","height","_onScroll","isDrag","axes","isHold","document","querySelector","Element","Axes","circular","range","deceleration","round","inputEvent","srcEvent","preventClickOnDrag","_disableClick","_isDragScroll","_isAnimation","delta","scrollLeft","scrollTop","setTo","depaPos","connect","PanInput","inputType","hammerManagerOptions","touchAction","addEventListener","update","destroy","removeEventListener","min","offsetLeft","offsetTop","offsetWidth","offsetHeight","align","padding","offset","itemPos","scrollPos","_onPreventClick","_scrollTimer","clearTimeout","setTimeout","isDragScroll","isTrusted","__decorate","Conveyer","CONVEYER_METHODS","CONVEYER_EVENTS","CONVEYER_REACTIVE_STATE","state","methods","events","data","container","props","ref","_i","args","result","_a","str","replace","all","letter","toUpperCase","modules"],"mappings":"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"}